From 1ee0ea33d53aea5c7e1b7429820ebe55361320a7 Mon Sep 17 00:00:00 2001
From: Mingcong Bai <jeffbai@aosc.io>
Date: Wed, 28 Feb 2024 22:02:57 +0800
Subject: [PATCH 04/18] [LoongArchLinux] QtScript: Add LoongArch support

---
 .../javascriptcore/JavaScriptCore/runtime/JSValue.h      | 8 ++++++++
 .../javascriptcore/JavaScriptCore/wtf/Platform.h         | 9 +++++++--
 2 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSValue.h b/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSValue.h
index 7584c52967..90e53e6197 100644
--- a/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSValue.h
+++ b/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSValue.h
@@ -490,7 +490,11 @@ namespace JSC {
             u.asBits.tag = CellTag;
         else
             u.asBits.tag = EmptyValueTag;
+#if defined(__loongarch64) || defined(__mips64)
+        u.asBits.payload = reinterpret_cast<int64_t>(ptr);
+#else
         u.asBits.payload = reinterpret_cast<int32_t>(ptr);
+#endif
 #if ENABLE(JSC_ZOMBIES)
         ASSERT(!isZombie());
 #endif
@@ -502,7 +506,11 @@ namespace JSC {
             u.asBits.tag = CellTag;
         else
             u.asBits.tag = EmptyValueTag;
+#if defined(__loongarch64) || defined(__mips64)
+        u.asBits.payload = reinterpret_cast<int64_t>(const_cast<JSCell*>(ptr));
+#else
         u.asBits.payload = reinterpret_cast<int32_t>(const_cast<JSCell*>(ptr));
+#endif
 #if ENABLE(JSC_ZOMBIES)
         ASSERT(!isZombie());
 #endif
diff --git a/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h b/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h
index a4695a261f..df5212605d 100644
--- a/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h
+++ b/qtscript/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h
@@ -226,6 +226,11 @@
 #define WTF_CPU_SPARC 1
 #endif
 
+/* CPU(3A5000) */
+#if defined(__loongarch64)
+#define WTF_CPU_LA64 1
+#endif
+
 /* CPU(X86) - i386 / x86 32-bit */
 #if   defined(__i386__) \
     || defined(i386)     \
@@ -958,7 +963,7 @@
 #endif
 
 #if !defined(WTF_USE_JSVALUE64) && !defined(WTF_USE_JSVALUE32) && !defined(WTF_USE_JSVALUE32_64)
-#if (CPU(X86_64) && !CPU(X32) && (OS(UNIX) || OS(WINDOWS) || OS(SOLARIS) || OS(HPUX))) || (CPU(IA64) && !CPU(IA64_32)) || CPU(ALPHA) || CPU(AIX64) || CPU(SPARC64) || CPU(MIPS64) || CPU(AARCH64) || CPU(RISCV64)
+#if (CPU(X86_64) && !CPU(X32) && (OS(UNIX) || OS(WINDOWS) || OS(SOLARIS) || OS(HPUX))) || (CPU(IA64) && !CPU(IA64_32)) || CPU(ALPHA) || CPU(AIX64) || CPU(SPARC64) || CPU(MIPS64) || CPU(AARCH64) || CPU(RISCV64) || defined(__loongarch64)
 #define WTF_USE_JSVALUE64 1
 #elif CPU(ARM) || CPU(PPC64) || CPU(RISCV32)
 #define WTF_USE_JSVALUE32 1
@@ -976,7 +981,7 @@ on MinGW. See https://bugs.webkit.org/show_bug.cgi?id=29268 */
 #endif
 
 /* Disable JIT on x32 */
-#if CPU(X32)
+#if CPU(X32) || defined(__loongarch64)
 #define ENABLE_JIT 0
 #endif
 
-- 
2.43.4

