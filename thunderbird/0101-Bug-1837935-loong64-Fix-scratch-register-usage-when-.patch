From f363673871e47c0eb7e9ba54a87e83c6720a3d26 Mon Sep 17 00:00:00 2001
From: Zhao Jiazhong <zhaojiazhong-hf@loongson.cn>
Date: Mon, 12 Jun 2023 18:25:23 +0000
Subject: [PATCH 2/3] Bug 1837935 - [loong64] Fix scratch register usage when
 compare and branch. r=iain DONTBUILD

Differential Revision: https://phabricator.services.mozilla.com/D180664

(cherry picked from commit 68eb7fce3d0391dad68bae7cfd13c83a6c50b0b7)
---
 js/src/jit/loong64/MacroAssembler-loong64.cpp | 41 ++++++++++++-------
 js/src/jit/loong64/MacroAssembler-loong64.h   |  6 ++-
 2 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/js/src/jit/loong64/MacroAssembler-loong64.cpp b/js/src/jit/loong64/MacroAssembler-loong64.cpp
index 9da4378940026..01ff5b83e9a14 100644
--- a/js/src/jit/loong64/MacroAssembler-loong64.cpp
+++ b/js/src/jit/loong64/MacroAssembler-loong64.cpp
@@ -896,7 +896,7 @@ void MacroAssemblerLOONG64::ma_b(Register lhs, ImmWord imm, Label* label,
     ScratchRegisterScope scratch(asMasm());
     MOZ_ASSERT(lhs != scratch);
     ma_li(scratch, imm);
-    ma_b(lhs, Register(scratch), label, c, jumpKind);
+    ma_b(lhs, Register(scratch), label, c, jumpKind, scratch);
   }
 }
 
@@ -905,7 +905,7 @@ void MacroAssemblerLOONG64::ma_b(Register lhs, Address addr, Label* label,
   ScratchRegisterScope scratch(asMasm());
   MOZ_ASSERT(lhs != scratch);
   ma_ld_d(scratch, addr);
-  ma_b(lhs, Register(scratch), label, c, jumpKind);
+  ma_b(lhs, Register(scratch), label, c, jumpKind, scratch);
 }
 
 void MacroAssemblerLOONG64::ma_b(Address addr, Imm32 imm, Label* label,
@@ -955,7 +955,8 @@ void MacroAssemblerLOONG64::ma_bl(Label* label) {
 }
 
 void MacroAssemblerLOONG64::branchWithCode(InstImm code, Label* label,
-                                           JumpKind jumpKind) {
+                                           JumpKind jumpKind,
+                                           Register scratch) {
   // simply output the pointer of one label as its id,
   // notice that after one label destructor, the pointer will be reused.
   spew("branch .Llabel %p", label);
@@ -990,9 +991,14 @@ void MacroAssemblerLOONG64::branchWithCode(InstImm code, Label* label,
     if (code.encode() == inst_beq.encode()) {
       // Handle long jump
       addLongJump(nextOffset(), BufferOffset(label->offset()));
-      ScratchRegisterScope scratch(asMasm());
-      ma_liPatchable(scratch, ImmWord(LabelBase::INVALID_OFFSET));
-      as_jirl(zero, scratch, BOffImm16(0));  // jr scratch
+      if (scratch == Register::Invalid()) {
+        ScratchRegisterScope scratch(asMasm());
+        ma_liPatchable(scratch, ImmWord(LabelBase::INVALID_OFFSET));
+        as_jirl(zero, scratch, BOffImm16(0));  // jr scratch
+      } else {
+        ma_liPatchable(scratch, ImmWord(LabelBase::INVALID_OFFSET));
+        as_jirl(zero, scratch, BOffImm16(0));  // jr scratch
+      }
       as_nop();
       return;
     }
@@ -1007,9 +1013,14 @@ void MacroAssemblerLOONG64::branchWithCode(InstImm code, Label* label,
 #endif
     writeInst(code_r.encode());
     addLongJump(nextOffset(), BufferOffset(label->offset()));
-    ScratchRegisterScope scratch(asMasm());
-    ma_liPatchable(scratch, ImmWord(LabelBase::INVALID_OFFSET));
-    as_jirl(zero, scratch, BOffImm16(0));
+    if (scratch == Register::Invalid()) {
+      ScratchRegisterScope scratch(asMasm());
+      ma_liPatchable(scratch, ImmWord(LabelBase::INVALID_OFFSET));
+      as_jirl(zero, scratch, BOffImm16(0));  // jr scratch
+    } else {
+      ma_liPatchable(scratch, ImmWord(LabelBase::INVALID_OFFSET));
+      as_jirl(zero, scratch, BOffImm16(0));  // jr scratch
+    }
     as_nop();
     return;
   }
@@ -1485,11 +1496,13 @@ void MacroAssemblerLOONG64::ma_store(Imm32 imm, const BaseIndex& dest,
 // Branches when done from within loongarch-specific code.
 // TODO(loong64) Optimize ma_b
 void MacroAssemblerLOONG64::ma_b(Register lhs, Register rhs, Label* label,
-                                 Condition c, JumpKind jumpKind) {
+                                 Condition c, JumpKind jumpKind,
+                                 Register scratch) {
   switch (c) {
     case Equal:
     case NotEqual:
-      asMasm().branchWithCode(getBranchCode(lhs, rhs, c), label, jumpKind);
+      asMasm().branchWithCode(getBranchCode(lhs, rhs, c), label, jumpKind,
+                              scratch);
       break;
     case Always:
       ma_b(label, jumpKind);
@@ -1499,12 +1512,12 @@ void MacroAssemblerLOONG64::ma_b(Register lhs, Register rhs, Label* label,
     case Signed:
     case NotSigned:
       MOZ_ASSERT(lhs == rhs);
-      asMasm().branchWithCode(getBranchCode(lhs, c), label, jumpKind);
+      asMasm().branchWithCode(getBranchCode(lhs, c), label, jumpKind, scratch);
       break;
     default: {
       Condition cond = ma_cmp(ScratchRegister, lhs, rhs, c);
       asMasm().branchWithCode(getBranchCode(ScratchRegister, cond), label,
-                              jumpKind);
+                              jumpKind, scratch);
       break;
     }
   }
@@ -5204,7 +5217,7 @@ void MacroAssemblerLOONG64Compat::handleFailureWithHandlerTail(
   mov(StackPointer, a0);  // Use a0 since it is a first function argument
 
   // Call the handler.
-  using Fn = void (*)(ResumeFromException * rfe);
+  using Fn = void (*)(ResumeFromException* rfe);
   asMasm().setupUnalignedABICall(a1);
   asMasm().passABIArg(a0);
   asMasm().callWithABI<Fn, HandleException>(
diff --git a/js/src/jit/loong64/MacroAssembler-loong64.h b/js/src/jit/loong64/MacroAssembler-loong64.h
index 722c30f0eb6ee..0f11809d6ae02 100644
--- a/js/src/jit/loong64/MacroAssembler-loong64.h
+++ b/js/src/jit/loong64/MacroAssembler-loong64.h
@@ -144,7 +144,8 @@ class MacroAssemblerLOONG64 : public Assembler {
   void ma_pop(Register r);
   void ma_push(Register r);
 
-  void branchWithCode(InstImm code, Label* label, JumpKind jumpKind);
+  void branchWithCode(InstImm code, Label* label, JumpKind jumpKind,
+                      Register scratch = Register::Invalid());
   // branches when done from within la-specific code
   void ma_b(Register lhs, ImmWord imm, Label* l, Condition c,
             JumpKind jumpKind = LongJump);
@@ -281,7 +282,8 @@ class MacroAssemblerLOONG64 : public Assembler {
 
   // branches when done from within la-specific code
   void ma_b(Register lhs, Register rhs, Label* l, Condition c,
-            JumpKind jumpKind = LongJump);
+            JumpKind jumpKind = LongJump,
+            Register scratch = Register::Invalid());
   void ma_b(Register lhs, Imm32 imm, Label* l, Condition c,
             JumpKind jumpKind = LongJump);
   void ma_b(Register lhs, ImmPtr imm, Label* l, Condition c,
-- 
2.43.0

