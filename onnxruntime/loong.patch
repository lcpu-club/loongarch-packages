diff --git a/PKGBUILD b/PKGBUILD
index 11b390c..23d2815 100644
--- a/PKGBUILD
+++ b/PKGBUILD
@@ -81,6 +81,17 @@ prepare() {
       -e '368aadd_library(nsync::nsync_cpp ALIAS nsync_cpp)' \
       -i cmake/external/onnxruntime_external_deps.cmake
 
+  # Find system nsync for loong64. The above sed command doesn't work for loong64.
+  cat >> cmake/external/onnxruntime_external_deps.cmake << EOF
+
+  # Find and use system nsync library
+  find_package(nsync_cpp QUIET)
+  if(nsync_cpp_FOUND)
+    message(STATUS "Found system nsync_cpp")
+    add_library(nsync::nsync_cpp ALIAS nsync_cpp)
+  endif()
+EOF
+
   patch -Np1 -i "${srcdir}/${pkgbase}-install-orttraining-files.patch"
   patch -Np1 -i "${srcdir}/${pkgbase}-system-flatbuffers.patch"
 
@@ -108,7 +119,7 @@ build() {
     -DBUILD_TESTING=OFF
     -Donnxruntime_ENABLE_TRAINING=ON
     -Donnxruntime_ENABLE_LAZY_TENSOR=OFF
-    -Donnxruntime_USE_MPI=ON
+    -Donnxruntime_USE_MPI=OFF
     -Donnxruntime_USE_DNNL=ON
     # Stable release of eigen is too old for onnxruntime.
     -Donnxruntime_USE_PREINSTALLED_EIGEN=OFF
@@ -148,22 +159,22 @@ build() {
   export CXX="$NVCC_CCBIN"
   export CC="${NVCC_CCBIN/g++/gcc}"
 
-  echo "Build onnxruntime with CUDA without optimization"
+  echo "Build onnxruntime without optimization" # We don't have cuda
   cd "${srcdir}/${pkgbase}-cuda"
-  cmake "${_cmake_cuda_args[@]}"
+  cmake "${_cmake_args[@]}"
   cmake --build build
   cd build
   install -Dm644 ../docs/python/README.rst docs/python/README.rst
   ln -s ../setup.py .
   python -m build --wheel --no-isolation
 
-  echo "Build onnxruntime with CUDA with AVX optimizations"
+  echo "Build onnxruntime with LASX optimizations"
   cd "${srcdir}/${pkgbase}-opt-cuda"
-  echo 'string(APPEND CMAKE_C_FLAGS " -march=haswell")' \
+  echo 'string(APPEND CMAKE_C_FLAGS " -march=la464")' \
     >> cmake/adjust_global_compile_flags.cmake
-  echo 'string(APPEND CMAKE_CXX_FLAGS " -march=haswell")' \
+  echo 'string(APPEND CMAKE_CXX_FLAGS " -march=la464")' \
     >> cmake/adjust_global_compile_flags.cmake
-  cmake "${_cmake_cuda_args[@]}"
+  cmake "${_cmake_args[@]}"
   cmake --build build
   cd build
   install -Dm644 ../docs/python/README.rst docs/python/README.rst
@@ -181,9 +192,9 @@ build() {
 
   echo "Build onnxruntime with ROCm with AVX optimizations"
   cd "${srcdir}/${pkgbase}-opt-rocm"
-  echo 'string(APPEND CMAKE_C_FLAGS " -march=haswell")' \
+  echo 'string(APPEND CMAKE_C_FLAGS " -march=la464")' \
     >> cmake/adjust_global_compile_flags.cmake
-  echo 'string(APPEND CMAKE_CXX_FLAGS " -march=haswell")' \
+  echo 'string(APPEND CMAKE_CXX_FLAGS " -march=la464")' \
     >> cmake/adjust_global_compile_flags.cmake
   cmake "${_cmake_rocm_args[@]}"
   cmake --build build
@@ -195,9 +206,6 @@ build() {
 
 package_onnxruntime() {
   pkgdesc="$_pkgdesc"
-  optdepends+=('cuda: nVidia GPU acceleration'
-               'cudnn: nVidia GPU acceleration'
-               'nccl: nVidia GPU acceleration')
 
   cd "${pkgbase}-cuda"
   DESTDIR="${pkgdir}" cmake --install build
@@ -208,10 +216,8 @@ package_onnxruntime() {
 }
 
 package_onnxruntime-opt() {
-  pkgdesc="$_pkgdesc (with AVX2 CPU optimizations)"
-  optdepends+=('cuda: nVidia GPU acceleration'
-               'cudnn: nVidia GPU acceleration'
-               'nccl: nVidia GPU acceleration')
+  pkgdesc="$_pkgdesc (with LASX CPU optimizations)"
+
   provides=("${pkgbase}=${pkgver}")
   conflicts=("${pkgbase}")
 
@@ -237,7 +243,7 @@ package_onnxruntime-rocm() {
 
 package_onnxruntime-opt-rocm() {
   echo "foo"
-  pkgdesc="$_pkgdesc (with ROCm and AVX2 CPU optimizations)"
+  pkgdesc="$_pkgdesc (with ROCm and LASX CPU optimizations)"
   depends+=('rocm-hip-sdk' 'roctracer' 'rccl')
   provides=("${pkgbase}=${pkgver}")
   conflicts=("${pkgbase}")
@@ -251,9 +257,6 @@ package_onnxruntime-opt-rocm() {
 package_python-onnxruntime() {
   pkgdesc="$_pkgdesc"
   depends+=("${pkgbase}" "${_pydepends[@]}")
-  optdepends+=('cuda: nVidia GPU acceleration'
-               'cudnn: nVidia GPU acceleration'
-               'nccl: nVidia GPU acceleration')
 
   cd "${pkgbase}-cuda/build"
   python -m installer --destdir="${pkgdir}" dist/*.whl
@@ -262,13 +265,10 @@ package_python-onnxruntime() {
 }
 
 package_python-onnxruntime-opt() {
-  pkgdesc="$_pkgdesc (with AVX2 CPU optimizations)"
+  pkgdesc="$_pkgdesc (with LASX CPU optimizations)"
   depends+=("${pkgbase}-opt" "${_pydepends[@]}")
   provides=("python-${pkgbase}=${pkgver}")
   conflicts=("python-${pkgbase}")
-  optdepends+=('cuda: nVidia GPU acceleration'
-               'cudnn: nVidia GPU acceleration'
-               'nccl: nVidia GPU acceleration')
 
   cd "${pkgbase}-opt-cuda/build"
   python -m installer --destdir="${pkgdir}" dist/*.whl
@@ -289,7 +289,7 @@ package_python-onnxruntime-rocm() {
 }
 
 package_python-onnxruntime-opt-rocm() {
-  pkgdesc="$_pkgdesc (with ROCm and AVX2 CPU optimizations)"
+  pkgdesc="$_pkgdesc (with ROCm and LASX CPU optimizations)"
   depends+=("${pkgbase}-opt-rocm" "${_pydepends[@]}")
   provides=("python-${pkgbase}=${pkgver}")
   conflicts=("python-${pkgbase}")
@@ -299,3 +299,9 @@ package_python-onnxruntime-opt-rocm() {
   install -Dm644 ../LICENSE "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
   install -Dm644 ../ThirdPartyNotices.txt "${pkgdir}/usr/share/licenses/${pkgname}/ThirdPartyNotices.txt"
 }
+
+depends=(${depends[@]/intel-oneapi-mkl})
+makedepends=(${makedepends[@]/cuda})
+makedepends=(${makedepends[@]/cudnn})
+makedepends=(${makedepends[@]/nccl})
+makedepends=(${makedepends[@]/gcc13})
